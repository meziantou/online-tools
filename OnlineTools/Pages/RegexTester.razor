@page "/regex-tester"
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime
@inject ClipboardService ClipboardService
@inject NavigationManager NavigationManager
@implements IDisposable

<h1>.NET Regex Tester</h1>
<p><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference">Regular Expression Language - Quick Reference</a></p>

<label>Pattern</label>
<textarea class="form-control code" @bind="Pattern" @bind:event="oninput" spellcheck="false"></textarea>

<div class="regex-options">
    @foreach (RegexOptions value in Enum.GetValues(typeof(RegexOptions)))
    {
        if (value != RegexOptions.None)
        {
            <label>
                <input type="checkbox" checked="@HasValue(value)" @onchange="(e)=> SetValue(value, (bool)e.Value)" /> @value
            </label>
        }
    }
</div>

<label>Input</label>
<textarea class="form-control code" @bind="Text" @bind:event="oninput" spellcheck="false"></textarea>

<label><input type="checkbox" @bind="Replace" /> Replace</label>
@if (Replace)
{
    <textarea class="form-control code" @bind="Replacement" @bind:event="oninput" spellcheck="false"></textarea>
}

<div>
    <button class="btn btn-primary" @onclick="ExecuteRegex" title="Evaluate with options @Options">Evaluate</button>
    <button class="btn btn-secondary" @onclick="CopyAsCsharp">Copy Regex as C# code</button>
</div>

@if (error != null)
{
    <pre>@error</pre>
}
else if (matches != null)
{
    <p class="match-highlighted match-value" style="white-space: pre-wrap; font-family: monospace">@highlightedText</p>

    @if (replacedText != null)
    {
        <h4>Replacement <small><a href="/string-info?Text=@replacedText">string info</a></small></h4>
        <p class="result" style="white-space: pre-wrap; font-family: monospace">@replacedText</p>
    }

    @foreach (var (index, match) in EnumerateWithIndex<Match>(matches))
    {
        <div class="match">
            <h3>Match @(index + 1)</h3>
            <table class="match-details">
                <tbody>
                    <tr>
                        <td class="match-name">Full match</td>
                        <td class="match-index">@match.Index-@(match.Index + match.Length)</td>
                        <td class="match-value">@match.Value</td>
                        <td><a href="/string-info?Text=@match.Value">string info</a></td>
                    </tr>

                    @foreach (Group group in match.Groups)
                    {
                        foreach (Capture capture in group.Captures)
                        {
                            <tr>
                                <td class="match-name">Group @group.Name</td>
                                <td class="match-index">@capture.Index-@(capture.Index + capture.Length)</td>
                                <td class="match-value">@capture.Value</td>
                                <td><a href="/string-info?Text=@capture.Value">string info</a></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    [Parameter, SupplyParameterFromQuery]
    public string Pattern { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public bool Replace { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string Replacement { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string Text { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string Options { get; set; }

    private string error;
    private MatchCollection matches;
    private MarkupString highlightedText;
    private string replacedText;
    private System.Threading.Timer timer;

    protected override void OnInitialized()
    {
        timer = new System.Threading.Timer(o =>
        {
            UpdateUrl();
        }, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(500));
    }

    async Task CopyAsCsharp()
    {
        var context = GetContext();
        var text = $"new Regex({WriteStringLiteral(context.Pattern)}, {WriteRegexOptions(context.Options)}, TimeSpan.FromSeconds(1))";
        try
        {
            await ClipboardService.WriteTextAsync(text);
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }

    protected override void OnParametersSet()
    {
        ExecuteRegex();
    }

    private void UpdateUrl()
    {
        NavigationManager.UpdateUrlUsingParameters(this, replaceHistory: true);
    }

    void ExecuteRegex()
    {
        var currentContext = GetContext();

        error = null;
        matches = null;
        highlightedText = default;
        replacedText = null;

        try
        {
            matches = Regex.Matches(currentContext.Input, currentContext.Pattern, currentContext.Options, TimeSpan.FromSeconds(5));

            // Highlight result
            var sb = new System.Text.StringBuilder();

            var previousIndex = 0;
            var matchIndex = 0;
            foreach (Match match in matches)
            {
                if (match.Length == 0)
                    continue;

                sb.Append(HtmlEncoder.Default.Encode(currentContext.Input.Substring(previousIndex, match.Index - previousIndex)));
                sb.Append($"<span b-regex class='match-{matchIndex % 2}'>");
                sb.Append(HtmlEncoder.Default.Encode(currentContext.Input.Substring(match.Index, match.Length)));
                sb.Append("</span>");

                previousIndex = match.Index + match.Length;
                matchIndex++;
            }

            sb.Append(HtmlEncoder.Default.Encode(currentContext.Input[previousIndex..]));

            highlightedText = new MarkupString(sb.ToString());

            if (currentContext.Replacement != null)
            {
                replacedText = Regex.Replace(currentContext.Input, currentContext.Pattern, currentContext.Replacement, currentContext.Options, TimeSpan.FromSeconds(5));
            }
        }
        catch (RegexParseException ex)
        {
            error = ex.Message;
        }
        catch (Exception ex)
        {
            error = ex.ToString();
        }
    }

    static IEnumerable<(int, T)> EnumerateWithIndex<T>(IEnumerable<T> enumerable)
    {
        var i = 0;
        foreach (var item in enumerable)
        {
            yield return (i, item);
            i++;
        }
    }

    bool HasValue(RegexOptions flag) => GetContext().Options.HasFlag(flag);

    void SetValue(RegexOptions flag, bool enable)
    {
        var options = GetContext().Options;
        if (enable)
        {
            options |= flag;
        }
        else
        {
            options &= ~flag;
        }

        Options = options.ToString();
        UpdateUrl();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private static string WriteRegexOptions(RegexOptions options)
    {
        if (options == RegexOptions.None)
            return "RegexOptions.None";

        var values = new List<RegexOptions>();
        foreach (var value in Enum.GetValues<RegexOptions>())
        {
            if (value == RegexOptions.None)
                continue;

            if (options.HasFlag(value))
            {
                values.Add(value);
            }
        }

        return string.Join(" | ", values.Select(v => "RegexOptions." + Enum.GetName(v)));
    }

    private static string WriteStringLiteral(string value)
    {
        var sb = new System.Text.StringBuilder();
        sb.Append("\"");
        foreach (var c in value)
        {
            switch (c)
            {
                case '"':
                    sb.Append("\\\"");
                    break;

                case '\t':
                    sb.Append(@"\t");
                    break;

                case '\r':
                    sb.Append(@"\r");
                    break;

                case '\n':
                    sb.Append(@"\n");
                    break;

                case '\a':
                    sb.Append(@"\a");
                    break;

                case '\b':
                    sb.Append(@"\b");
                    break;

                case '\f':
                    sb.Append(@"\f");
                    break;

                case '\v':
                    sb.Append(@"\v");
                    break;

                case '\0':
                    sb.Append(@"\0");
                    break;

                case '\\':
                    sb.Append(@"\\");
                    break;

                default:
                    sb.Append(c);
                    break;
            }
        }
        sb.Append("\"");
        return sb.ToString();
    }

    private RegexContext GetContext()
    {
        if (!Enum.TryParse<RegexOptions>(Options, out var regexOptions))
        {
            regexOptions = RegexOptions.None;
        }

        return new RegexContext(Pattern ?? "", regexOptions, Text ?? "", Replace ? Replacement : null);
    }

    record RegexContext(string Pattern, RegexOptions Options, string Input, string Replacement);
}