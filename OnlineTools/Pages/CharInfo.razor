@page "/char-info"
@using System.Text
@inject NavigationManager NavigationManager

<h1>Character Info</h1>

<p class="text-description">Enter a codepoint </p>
<input class="form-control code" @oninput="onInputEvent" value="@Text" />

@if (result != null)
{
    <div style="display:flex; flex-wrap:wrap">
        @foreach (var item in result)
        {
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">@item.DisplayValue</h3>
                    <p style="margin-bottom: 0">@item.Name</p>
                    <table>
                        <tr>
                            <td class="column-info">Code point:</td>
                            <td>@item.CharInfo.CodePoint (@item.DisplayCodePoint)</td>
                        </tr>
                        <tr>
                            <td class="column-info">Category:</td>
                            <td>@item.CharInfo.Category</td>
                        </tr>
                        <tr>
                            <td class="column-info">Block:</td>
                            <td>@item.Block</td>
                        </tr>
                        <tr>
                            <td class="column-info">Escape:</td>
                            <td>@item.Escape</td>
                        </tr>
                    </table>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter, SupplyParameterFromQuery]
    public string Text { get; set; }

    Action<ChangeEventArgs> onInputEvent;
    ICollection<CharInfoWrapper> result;

    protected override void OnInitialized()
    {
        onInputEvent = DebounceEvent<ChangeEventArgs>(e => OnChange(e), TimeSpan.FromMilliseconds(1000));
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Compute();
            StateHasChanged();
        }
    }

    void OnChange(ChangeEventArgs e)
    {
        Text = e.Value as string;
        Compute();
    }

    void Compute()
    {
        Text ??= "";
        NavigationManager.UpdateUrlUsingParameters(this, replaceHistory: true);

        Console.WriteLine("Searching: " + Text);
        result = UnicodeData.GetData(Text);
    }

    Action<T> DebounceEvent<T>(Action<T> action, TimeSpan interval)
    {
        return Debounce<T>(arg =>
        {
            InvokeAsync(() =>
            {
                action(arg);
                StateHasChanged();
            });
        }, interval);
    }

    Action<T> Debounce<T>(Action<T> action, TimeSpan interval)
    {
        if (action == null) throw new ArgumentNullException(nameof(action));

        var last = 0;
        return arg =>
        {
            var current = System.Threading.Interlocked.Increment(ref last);
            Task.Delay(interval).ContinueWith(task =>
            {
                if (current == last)
                {
                    action(arg);
                }
            });
        };
    }
}